#!/usr/bin/python3
"""script to merge config profiles betwen 73 and 74"""
# postinst script for ibm-ca-os-security-profiler
# (C) Copyright IBM Corp. 2018
import os
import sys
sys.path.insert(0, '/opt/ibm/appliance/platform/xcat/modules/python')
from ibm.ca.util import *
from ibm.ca.errors import *

logger = Logger('ibm-ca-os-security-profiler')
cmd_runner = CmdRunner(logger)

utility_runner = UtilityFunctionRunner(logger)
productID = utility_runner.get_appliance_product_id()

reboot_required = False

logger.log_print("Configuring package...")
print("See " + logger.filename + " to watch its progress.")

(rc, stdout, sterr) = cmd_runner.run_shell_cmd("grep 'password_pbkdf2' /etc/grub.d/40_custom")
if rc != 0:
    with open("/etc/grub.d/40_custom", "a") as custom_file:
        custom_file.write("set superusers=\"root\"\npassword_pbkdf2 root grub.pbkdf2.sha512.10000.703DBF6DC294167C9FABBDE31F8DB634513A8C44DF14D147E9C51EA13B1198A464E9C1AF26E195D6B745F5D40B13D652259899D554BA350A1C2374885F770106.54A3F917738412036B701A5FD4549C7868B2B7C40509C579009901AB872BA454045C6525512FFFEFDABE78D324D5F26B860C569DD4F5CBE12E65E9A704E7FA20\n")
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd("grub2-mkconfig --output=/tmp/grub2.cfg")
    if rc == 0:
        cmd_runner.run_shell_cmd("mv /tmp/grub2.cfg /boot/grub2/grub.cfg")

grub_conf = '/boot/grub2/grub.cfg'
grub_audit_check = "grep 'audit=1' " + grub_conf
grub_audit_fix = "grubby --args='audit=1' --update-kernel=ALL "
sysctl_conf = '/etc/sysctl.conf'

logger.log_info("Configuring grub cmdline args")

logger.log_info("Enabling live auditd changes")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_audit_check)

if rc != 0:
    logger.log_info("Auditing not enabled at boot time, enabling")
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_audit_fix)
    reboot_required = True
else:
    logger.log_info("Auditing not enabled, continuing")

#Configuration for issue : STIG - Sailfish: RHEL OS 7.2 or newer with BIOS must require authentication #4231!!
logger.log_info("Configuring /boot/grub2/user.cfg file!!")
with open("/boot/grub2/user.cfg", "w") as custom_file_1:
    custom_file_1.write("GRUB2_PASSWORD=grub.pbkdf2.sha512.10000.703DBF6DC294167C9FABBDE31F8DB634513A8C44DF14D147E9C51EA13B1198A464E9C1AF26E195D6B745F5D40B13D652259899D554BA350A1C2374885F770106.54A3F917738412036B701A5FD4549C7868B2B7C40509C579009901AB872BA454045C6525512FFFEFDABE78D324D5F26B860C569DD4F5CBE12E65E9A704E7FA20\n")
logger.log_info_done()

#logger.log_info("Checking kernel FIPS mode")
#grub_fips_check = "grep 'fips=1' " + grub_conf
#grub_fips_fix = "grubby --args='fips=1' --update-kernel=ALL "
#(rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_fips_check)
#if rc != 0:
#    logger.log_info("FIPS is not enabled at boot time, enabling")
#    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_fips_fix)
#    reboot_required = True
#else:
#    logger.log_info("FIPS is already enabled, continuing")

# Disable FIPS
if (productID != '0'):
    logger.log_info("Disabling FIPS mode....")
    grub_fips_cmd1 = "grubby --update-kernel=ALL --remove-args=fips=1"
    grub_fips_cmd2 = "sed -i 's/ fips=1//' /etc/default/grub"
    #(rc, stdout, sterr) = cmd_runner.run_shell_cmd('yum remove dracut-fips')
    #(rc, stdout, sterr) = cmd_runner.run_shell_cmd('dracut --force')
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_fips_cmd1)
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_fips_cmd2)
    reboot_required = True
else:
    logger.log_info("Continuing with default FIPS mode")

rand_va_check = "grep '^kernel.randomize_va_space=2' " + sysctl_conf
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(rand_va_check)
if rc != 0:
    logger.log_info("Adding/Correcting randomize virtual address space setting")
    rand_va_fix1 = "sed -i 's/^kernel\.randomize_va_space/#kernel\.randomize_va_space/' " + sysctl_conf
    rand_va_fix2 = "echo 'kernel.randomize_va_space=2' >> " + sysctl_conf
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(rand_va_fix1)
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(rand_va_fix2)
else:
    logger.log_info("Randomize virtual address space value is already set correctly")

(rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep '^net.ipv4.conf' " + sysctl_conf)
if rc==0:
    #check if value set to 0
    (rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep '^net.ipv4.conf.default.accept.*\s*[=]\s*[0]' " + sysctl_conf)
    if rc==0:
        logger.log_info("net.ipv4.conf.default.accept_redirects value already set correctly")
    else:
        cmd_runner.run_shell_cmd_or_raise("sed -i 's/^net.ipv4.conf.default.accept.*/net.ipv4.conf.default.accept_redirects = 0/' " + sysctl_conf)
    #check if value set to 0
    (rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep '^net.ipv4.conf.default.send.*\s*[=]\s*[0]' " + sysctl_conf)
    if rc==0:
        logger.log_info("net.ipv4.conf.default.send_redirects value already set correctly")
    else:
        cmd_runner.run_shell_cmd_or_raise("sed -i 's/^net.ipv4.conf.default.send.*/net.ipv4.conf.default.send_redirects = 0/'  " + sysctl_conf)
    #check if value set to 0
    (rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep '^net.ipv4.conf.all.*\s*[=]\s*[0]' " + sysctl_conf)
    if rc==0:
        logger.log_info("net.ipv4.conf.all.send_redirects value already set correctly")
    else:
        cmd_runner.run_shell_cmd_or_raise("sed -i 's/^net.ipv4.conf.all.*/net.ipv4.conf.all.send_redirects = 0/' " + sysctl_conf)
else:
    with open("/etc/sysctl.conf", "a") as sysctl:
        sysctl.write("net.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\n")


grub_usb_check = "grep 'nousb' " + grub_conf
grub_usb_fix0 = "grubby --args='nousb' --update-kernel=ALL"
grub_usb_fix1 = "grubby --remove-args='nousb' --update-kernel=ALL"
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_usb_check)
logger.log_info("Managing USB at grub level")

if productID == '0':
    #IIAS sub
    logger.log_info("Running on IIAS")
    if rc != 0:
        logger.log_info("USB not disabled at boot time, disabling")
        (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_usb_fix0)
        reboot_required = True
    else:
        logger.log_info("USB already disabled, continuing")
else :
    #Mini sub
    logger.log_info("Not running on IIAS")
    if rc == 0:
        logger.log_info("USB not enabled at boot time, enabling")
        (rc, stdout, sterr) = cmd_runner.run_shell_cmd(grub_usb_fix1)
        reboot_required = True
    else:
        logger.log_info("USB already enabled, continuing")

dccp_check = "grep 'install dccp /bin/true' /etc/modprobe.d/dccp-blacklist.conf"
dccp_fix = "echo 'install dccp /bin/true' >> /etc/modprobe.d/dccp-blacklist.conf"

logger.log_info("Disabling DCCP")

(rc, stdout, sterr) = cmd_runner.run_shell_cmd(dccp_check)

if rc !=0 :
    logger.log_info("DCCP still enabled, disabling")
    (_, _, _) = cmd_runner.run_shell_cmd(dccp_fix)

else:
    logger.log_info("DCCP already disabled, continuing")

logger.log_print("Managing USB at module level")
disabled_usb_loc = '/etc/modprobe.d/usb-storage.conf'
if productID == '0':
    #IIAS sub
    logger.log_info("Running on IIAS")
    if not os.path.isfile(disabled_usb_loc):
        logger.log_info("USB not disabled at module level, disabling")
        usb_disable = open(disabled_usb_loc, 'w')
        usb_disable.write("install usb-storage /bin/true\n")
        usb_disable.close()

    else:
        logger.log_info("USB already enabled, continuing")

else:
    #Mini sub
    logger.log_info("Not running on IIAS")
    if os.path.isfile(disabled_usb_loc):
        os.remove(disabled_usb_loc)
    else:
        logger.log_info("USB already disabled at module level, continuing")


profile_conf = '/etc/profile'
profile_tmout_check = "grep '^TMOUT' "+profile_conf
profile_tmout_fix = "sed -i 's/^TMOUT/#TMOUT/g' "+profile_conf

logger.log_info("de-configuring profile timeouts")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(profile_tmout_check)

if rc == 0:
    logger.log_info("Idle timeout enabled, disabling")
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(profile_tmout_fix)
else:
    logger.log_info("Auditing not enabled, continuing")


audit_rule = '/etc/audit/rules.d/audit.rules'
audit_limit_check = "grep '^-b 8192' " + audit_rule


logger.log_info("configuring audit rate limiting rule")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(audit_limit_check)

if rc != 0:
    logger.log_info("audit not rate limiting properly,fixing")
    rule_file = open(audit_rule, 'w')
    rule_file.write("## First rule - delete all\n")
    rule_file.write("-D\n\n")
    rule_file.write("## Increase the buffers to survive stress events.\n")
    rule_file.write("## Make this bigger for busy systems\n")
    rule_file.write("-b 8192\n\n")
    rule_file.write("## Set failure mode to syslog\n")
    rule_file.write("-f 1\n\n")
    rule_file.close()

else:
    logger.log_info("Audit rules properly rate limiting, continuing")


filter_our_rules = " find /etc/audit/rules.d/ -type f -not "
filter_our_rules += "\\( -name 'audit.rules' \\)"

logger.log_info("pruning additional rules")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(filter_our_rules)
if len(stdout) > 0:
    logger.log_info("auditd has extra rules,cleaning")
    for extra_rule in stdout.splitlines():
        [rc, stdout, stderr] = cmd_runner.run_cmd(['rm', '-f', extra_rule])
else:
    logger.log_info("No extra audit rules detected, continuing")

logger.log_info('Deploying auditd config template and restarting/enabling service')
auditd_conf = '/etc/audit/auditd.conf'
auditd_conf_template = '/opt/ibm/appliance/platform/xcat/files_for_deployment/auditd.conf.template'
logger.log_info("Deploying auditd template file")
cmd_runner.run_shell_cmd_or_raise("/bin/cp -f {} {}".format(auditd_conf_template, auditd_conf))
cmd_runner.run_shell_cmd_or_raise("service auditd restart")
cmd_runner.run_shell_cmd_or_raise("systemctl enable auditd")
logger.log_info_done()

logger.log_info("Flushing rules to allow new rules to take effect")
purge_rules = "/usr/sbin/auditctl -D"
refresh_rules = "/usr/sbin/augenrules --load"
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(purge_rules)
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(refresh_rules)

postfix_installed_check = 'rpm -qa postfix'
(rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_installed_check)

if rc == 0:
    logger.log_info("Postfix installed, proceeding with configuration")
        
    logger.log_info("configuring postfix to only listed on internal subnets")   
    postfix_conf = '/etc/postfix/main.cf'
    postfix_check1 = "grep '^mynetworks' " + postfix_conf
    postfix_check2 = "grep '^smtpd_client_restrictions' " + postfix_conf
    postfix_fix1 = "echo 'mynetworks = 9.0.224.0/23, 9.0.226.0/23, 9.0.230.0/23 ' >> " + postfix_conf
    postfix_fix2 = "echo 'smtpd_client_restrictions = permit_mynetworks, reject' >> " + postfix_conf
    postfix_check3 = 'alternatives --list|grep mta'
    postfix_fix3 = 'alternatives --set mta /usr/sbin/sendmail.postfix'

    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_check1)

    if rc != 0:
        logger.log_info("Postfix not allowing internal traffic")
        (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_fix1)
    else:
        logger.log_info("Postfix configured to allow internal traffic, continuing")
        
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_check2)
    
    if rc != 0:
        logger.log_info("Postfix not rejecting external traffic")
        (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_fix2)
    else:
        logger.log_info("Postfix already rejecting properly, continuing")
        
    (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_check3)

    #stdout=stdout.decode("utf8")
    if 'manual' not in stdout:
        logger.log_info("Postfix not specificied as mta")
        (rc, stdout, sterr) = cmd_runner.run_shell_cmd(postfix_fix3)
    else:
        logger.log_info("Postfix configured as default mta, continuing")

else:
    logger.log_info("postfix not installed, configure postfix")

logger.log_info("Restricting httpd ciphers and protocols...")
cmd_runner.run_shell_cmd_or_raise("sed -i 's/^SSLCipherSuite.*/SSLCipherSuite HIGH:!aNULL:!MD5/' /etc/httpd/conf.d/ssl.conf")
cmd_runner.run_shell_cmd_or_raise("sed -i 's/^SSLProtocol.*/SSLProtocol TLSv1.2/' /etc/httpd/conf.d/ssl.conf")

logger.log_info("Disabling HTTPD TRACE request..")
(rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep '^TraceEnable off' /etc/httpd/conf/httpd.conf")
if rc!=0:
    with open("/etc/httpd/conf/httpd.conf", "a") as httpd_config:
        httpd_config.write("TraceEnable off\n")

#Really httpd should not be running, but as this might be changed during an upgrade we'll issue a restart
cmd_runner.run_cmd_or_raise(['systemctl','restart','httpd'])

logger.log_info("Restricting local NFS to local subnets")
#find a line with *( exported to world
replacecmd = "sed -i 's:^/tftp.*$:/tftpboot 9.0.224.0/23(rw,no_root_squash,sync,no_subtree_check) 9.0.226.0/23(rw,no_root_squash,sync,no_subtree_check) 9.0.230.0/23(rw,no_root_squash,sync,no_subtree_check):' /etc/exports"
(rc, stdout, _) = cmd_runner.run_shell_cmd(replacecmd)
replacecmd = "sed -i 's:^/install.*$:/install 9.0.224.0/23(rw,no_root_squash,sync,no_subtree_check) 9.0.226.0/23(rw,no_root_squash,sync,no_subtree_check) 9.0.230.0/23(rw,no_root_squash,sync,no_subtree_check):' /etc/exports"
(rc, stdout, _) = cmd_runner.run_shell_cmd(replacecmd)
logger.log_info ('Re-exporting shares')    
(rc, stdout, sterr) = cmd_runner.run_shell_cmd("exportfs -r")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd("/usr/bin/setfacl -m g:ibmapadmin:rw /etc/exports")
(rc, stdout, sterr) = cmd_runner.run_shell_cmd("/usr/sbin/sysctl --system")

#Add/modify the parameters in /etc/login.defs file
logger.log_info("Add/modify the parameters in /etc/login.defs file")
login_parm = {"SHA_CRYPT_MIN_ROUNDS" : "500", "PASS_MIN_DAYS" : "1", "PASS_MAX_DAYS" : "60", "PASS_MIN_LEN" : "15", "FAIL_DELAY" : "4", "UMASK" : "077"}
for key, val in login_parm.items(): 
    (rc,stdout,sterr) = cmd_runner.run_shell_cmd("grep -ir \'"+ key +"\' /etc/login.defs")
    if rc==0:
        cmd_runner.run_shell_cmd_or_raise("sed -i \'s/\<"+key+"\>.*/"+key+ "   " +val+"/\' /etc/login.defs")
    else:
        with open("/etc/login.defs", "a") as login_file:
            login_file.write(key + " = " + val + "\n")

logger.log_info_done()
logger.log_info("Done configuring package.")

if reboot_required:
    logger.log_print("Kernel setting changed, reboot suggested...")
